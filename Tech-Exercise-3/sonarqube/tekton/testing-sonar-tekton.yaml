#### REPLACE FILE sonar-maven-pipeline.yaml maven-pipeline-code-analysis.yaml to tech-exercise/tekton/templates/pipelines/maven-pipeline.yaml and then follow next steps
# REPLACE tekton/templates/triggers/gitlab-trigger-template.yaml file with gitlab-trigger-sonarauth.yaml file
#
#

echo export TEAM_NAME="glsteam" | tee -a ~/.bashrc -a ~/.zshrc
echo export CLUSTER_DOMAIN="apps.ocp4.example.com" | tee -a ~/.bashrc -a ~/.zshrc
echo export GIT_SERVER="gitlab-ce.apps.ocp4.example.com" | tee -a ~/.bashrc -a ~/.zshrc

source ~/.zshrc
echo ${TEAM_NAME}
echo ${CLUSTER_DOMAIN}
echo ${GIT_SERVER}


oc login --server=https://api.${CLUSTER_DOMAIN##apps.}:6443 -u lab03 -p lab03

cd /projects/tech-exercise
cat <<'EOF' >> tekton/templates/tasks/sonarqube-quality-gate-check.yaml
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: sonarqube-quality-gate-check
spec:
  description: >-
    This Task can be used to check sonarqube quality gate
  workspaces:
    - name: output
    - name: sonarqube-auth
      optional: true
  params:
    - name: WORK_DIRECTORY
      description: Directory to start build in (handle multiple branches)
      type: string
    - name: IMAGE
      description: the image to use
      type: string
      default: "quay.io/eformat/openshift-helm:latest"
  steps:
  - name: check
    image: $(params.IMAGE)
    script: |
      #!/bin/sh
      test -f $(workspaces.sonarqube-auth.path) || export SONAR_USER="$(cat $(workspaces.sonarqube-auth.path)/username):$(cat $(workspaces.sonarqube-auth.path)/password)"
  
      cd $(workspaces.output.path)/$(params.WORK_DIRECTORY)
      TASKFILE=$(find . -type f -name report-task.txt)
      if [ -z ${TASKFILE} ]; then
        echo "Task File not found"
        exit 1
      fi
      echo ${TASKFILE}

      TASKURL=$(cat ${TASKFILE} | grep ceTaskUrl)
      TURL=${TASKURL##ceTaskUrl=}
      if [ -z ${TURL} ]; then
        echo "Task URL not found"
        exit 1
      fi
      echo ${TURL}

      AID=$(curl -u ${SONAR_USER} -s $TURL | jq -r .task.analysisId)
      if [ -z ${AID} ]; then
        echo "Analysis ID not found"
        exit 1
      fi
      echo ${AID}

      SERVERURL=$(cat ${TASKFILE} | grep serverUrl)
      SURL=${SERVERURL##serverUrl=}
      if [ -z ${SURL} ]; then
        echo "Server URL not found"
        exit 1
      fi
      echo ${SURL}

      BUILDSTATUS=$(curl -u ${SONAR_USER} -s $SURL/api/qualitygates/project_status?analysisId=${AID} | jq -r .projectStatus.status)
      if [ "${BUILDSTATUS}" != "OK" ]; then
        echo "Failed Quality Gate - please check - $SURL/api/qualitygates/project_status?analysisId=${AID}"
        exit 1
      fi

      echo "Quality Gate Passed OK - $SURL/api/qualitygates/project_status?analysisId=${AID}"
      exit 0
EOF

cd /projects/tech-exercise
git add .
git commit -m  "ðŸ¥½ ADD - code-analysis & check steps ðŸ¥½"
git push 

sleep 30

cd /projects/pet-battle-api
git commit --allow-empty -m "ðŸ§¦ TEST - running code analysis steps ðŸ§¦"
git push

## check the status of the pipeline on OCP console
#
#
